import 'dart:io';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_salesman_module/api/login_api.dart';
import 'package:flutter_salesman_module/models/autogenerate_model.dart';
import 'package:flutter_salesman_module/utils/services/global_methods.dart';

class ChannelDataProvider extends ChangeNotifier {
  Autogenerated? _channelData;
  bool _isLoading = false;
  String? _error;

  Autogenerated? get channelData => _channelData;
  bool get isLoading => _isLoading;
  String? get error => _error;

  Future<void> fetchChannelData(
    String username,
    String token,
    String date,
    String userId,
    VoidCallback onTokenExpired,
    BuildContext context,
  ) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    // Check internet connectivity
    final connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      _error = "No Internet Connection";
      GlobalMethods.showApiErrorMessage(
        context,
        "Connection Error",
        "Please check your internet connection.",
      );
      _isLoading = false;
      notifyListeners();
      return;
    }

    try {
      date = GlobalMethods.getFormattedGmtDate();
      _channelData = await LoginApi.getChannelData(
        username,
        token,
        date,
        userId,
      );
    } catch (e) {
      final errorMessage = e.toString(); 
      if (e is SocketException ||
          errorMessage.contains("Failed host lookup") ||
          errorMessage.contains(
            "OS Error: No address associated with hostname",
          )) {
        _error = "No Internet Connection";
        GlobalMethods.showApiErrorMessage(
          context,
          "Connection Error",
          "Please check your internet connection.",
        );
      } else if (errorMessage.contains(
        "Authorization has been denied for this request.",
      )) {
        final message = GlobalMethods.extractErrorMessage(errorMessage);
        GlobalMethods.showApiErrorMessage(context, "Error", message);
        onTokenExpired();
        _error = message;
      } else {
        _error = errorMessage;
      }

      _isLoading = false;
      notifyListeners();
      return;
    }

    _isLoading = false;
    notifyListeners();
  }
}
